@using HomeBudget.App_Code

<div class="navbar navbar-default navbar-fixed-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("HomeBudget", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Home", "Index", "Home")</li>
                <li>@Html.ActionLink("About", "About", "Home")</li>
                <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                <li>@Html.ActionLink("Sheets", "YearSheets", "Home")</li>
                <li class="dropdown" id="styleChangeDropdown">
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">Change style<span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        @{
                            var styleNames = Enum.GetNames(typeof(ChoosableStyle)).ToList();
                            var colorsCountInEachStyle = 5;
                            foreach (var styleName in styleNames)
                            {
                                <li>
                                    <div class="container" style="width: 200px;">
                                        <div class="row no-gutter" onclick="changeStyle('@styleName')">
                                            <div class="col-xs-6" style="margin-left: 10px">
                                                @styleName
                                            </div>
                                            @{
                                                for (int i = 0; i < colorsCountInEachStyle; ++i)
                                                {
                                                    <div class="col-xs-1">
                                                        <div class="colorPaletteElem" id="@(styleName + (i + 1))"></div>
                                                    </div>
                                                }
                                            }
                                            <div class="col-xs-1">
                                            </div>
                                        </div>
                                    </div>
                                </li>
                           }
                        }
                    </ul>
                </li>

            </ul>

            @Html.Partial("_LoginPartial")
        </div>
    </div>
</div>

<link id="pagestyle" rel="stylesheet" type="text/css" href="/Content/Terra.css">
<script src="/Scripts/Local/Cookies.js" type="text/javascript"></script>
<script type="text/javascript">
    function getCssFromFile(filePath, propertyName) {
        var text;
        $.ajax({
            url: filePath,
            async: false,   // asynchronous request? (synchronous requests are discouraged...)
            cache: false,   // with this, you can force the browser to not make cache of the retrieved data
            dataType: "text",  // jQuery will infer this, but you can set explicitly
            success: function (data, textStatus, jqXHR) {
                text = data;
            }
        });
        var startIndex = text.search(propertyName) + propertyName.length + 2;
        return text.substr(startIndex, 7);
    }

    $(function () {
        var currentStyle = readCookie("CurrentStyle");
        if (typeof currentStyle === 'undefined') {
            writeCookie("CurrentStyle", "/Content/Moonlight.css", 10);
        }
        @{
            foreach (var styleName in styleNames)
            {
                for (int i = 0; i < colorsCountInEachStyle; ++i)
                {
                    <text>
                        $("#@(styleName + (i + 1))").css("background", getCssFromFile("/Content/@(styleName).css", '--color@(i+1)'));
                    </text>
                }
            }
        }
    });

    setStyleBasingOnCookie();

    function changeStyle(styleName) {
        writeCookie("CurrentStyle", "/Content/" + styleName+".css", 10);
        setStyleBasingOnCookie();
    }

    function setStyleBasingOnCookie() {
        document.getElementById("pagestyle").setAttribute("href", readCookie("CurrentStyle"));
    }
</script>
